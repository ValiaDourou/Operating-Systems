#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <errno.h>
#include <semaphore.h>
#include <fcntl.h>
#define shm_size 1024
#define N 2

int *free_s;
int *free_a;

sem_t *rfree_s,*rfree_a;

void choose(int *array,int *X)
{
int i=1;
while((i<N+1)&&(array[i]==0))
{
i++;
}
*X=i;
}

int enter_p(int pid,int ppid,int *free_s,int *free_a)
{
int free_p;
printf("Just got in!I'm %d and I see %d free space\n",pid,*free_s);
while(*free_s<=0)
{
printf("I'm %d and I'm waiting\n",pid);
sleep(1);
}
*free_s=*free_s-1;

choose(free_a,&free_p);

if(free_p>0)
{
free_a[free_p]=0;
printf("I'm %d, my parent is %d and my ticket number is %d\n",pid,ppid,free_p);
}
return free_p;
}
void leave_p(int free_p,int pid)
{
free_a[free_p]=1;
*free_s=*free_s+1;
printf("I'm %d and I left from %d\n",pid,free_p);
}

int main()
{
rfree_s = sem_open ("Free_s", O_CREAT | O_EXCL, 0644, 1);
rfree_a = sem_open ("Free_a", O_CREAT | O_EXCL, 0644, 1);
int shmid;
key_t key=12345;
int j;

shmid=shmget(key,N*sizeof(int),0644|IPC_CREAT);

if(shmid<0)
{
perror("shmget\n");
exit(1);
}

free_s=(int *)shmat(shmid,NULL,0);
*free_s=N;

free_a=(int *)shmat(shmid,NULL,0);

for(j=1;j<N+1;j++)
{
free_a[j]=1;
}

int p=0;
pid_t pid[N+1];
int ticket[N+1];
for(p=0;p<N+1;p++)
{
pid[p]=fork();
if(pid[p]>0)
{
continue;
}
else if(pid[p]==0)
{
break;
}
}

if(pid[0]==0)
{
ticket[0]=enter_p(getpid(pid[p]),getppid(pid[p]),free_s,free_a);
}
else if(pid[1]==0)
{
ticket[1]=enter_p(getpid(pid[p]),getppid(pid[p]),free_s,free_a);
sleep(1);
leave_p(ticket[1],getpid(pid[1]));
}
else if(pid[2]==0)
{
enter_p(getpid(pid[p]),getppid(pid[p]),free_s,free_a);
}

return 0;
}